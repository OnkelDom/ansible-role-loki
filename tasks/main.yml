---
- name: create system group
  group:
    name: "{{ loki_system_group }}"
    system: true
    state: present
  when: loki_system_group != "root"
  become: true
  tags: loki

- name: create system user
  user:
    name: "{{ loki_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ loki_system_group }}"
    createhome: false
    home: /
  when: loki_system_user != "root"
  become: true
  tags: loki

- name: check if loki is installed
  stat:
    path: "/usr/local/bin/loki"
  register: __loki_is_installed
  become: true
  tags: loki

- name: gather currently installed loki version (if any)
  command: "/usr/local/bin/loki -version"
  args:
    warn: false
  changed_when: false
  register: __loki_current_version_output
  when: __loki_is_installed.stat.exists
  become: true
  tags: loki

- block:
  - name: get latest release
    uri:
      url: "https://api.github.com/repos/grafana/loki/releases/latest"
      method: GET
      return_content: true
      status_code: 200
      body_format: json
      validate_certs: false
      user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
      password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
    environment: "{{ proxy_env }}"
    no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
    register: _latest_release
    until: _latest_release.status == 200
    retries: 5

  - name: "set loki version to {{ _latest_release.json.tag_name[1:] }}"
    set_fact:
      loki_version: "{{ _latest_release.json.tag_name[1:] }}"
  when: loki_version == "latest"
  delegate_to: localhost
  run_once: true
  become: true
  tags: loki

- block:
  - name: get checksum list from github
    set_fact:
      _checksums: "{{ lookup('url', 'https://github.com/grafana/loki/releases/download/v' + loki_version + '/SHA256SUMS', wantlist=True) | list }}"
    environment: "{{ proxy_env }}"
    run_once: true
    become: true
    tags: loki

  - name: "get checksum for {{ go_arch }} architecture"
    set_fact:
      loki_checksum: "{{ item.split(' ')[0] }}"
    with_items: "{{ _checksums }}"
    when: "('linux-' + go_arch + '.zip') in item"
    become: true
    tags: loki

  - name: download binary to local folder
    get_url:
      url: "https://github.com/grafana/loki/releases/download/v{{ loki_version }}/loki-linux-{{ go_arch }}.zip"
      dest: "/tmp/loki-{{ loki_version }}.linux-{{ go_arch }}.zip"
      checksum: "sha256:{{ loki_checksum }}"
    environment: "{{proxy_env}}"
    register: _download_binary
    until: _download_binary is succeeded
    retries: 5
    delay: 2
    delegate_to: localhost
    check_mode: false
    become: true
    tags: loki

  - name: unpack binary
    unarchive:
      src: "/tmp/loki-{{ loki_version }}.linux-{{ go_arch }}.zip"
      dest: "/tmp"
      creates: "/tmp/loki-{{ loki_version }}.linux-{{ go_arch }}/loki"
    delegate_to: localhost
    check_mode: false
    become: true
    tags: loki

  - name: propagate binaries
    copy:
      src: "/tmp/loki-linux-{{ go_arch }}"
      dest: "{{ loki_binary_install_dir }}/loki"
      mode: 0755
      owner: root
      group: root
    notify: restart loki
    when: not ansible_check_mode
    become: true
    tags: loki
  when: (not __loki_is_installed.stat.exists) or (__loki_current_version_output.stdout.split(" ")[2] != loki_version)

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ loki_system_user }}"
    group: "{{ loki_system_group }}"
    mode: u+rwX,g+rwX,o=rX
  with_items:
    - "{{ loki_config_dir }}"
    - "{{ loki_data_dir }}"
    - "{{ loki_data_dir }}/index"
    - "{{ loki_data_dir }}/chunks"
  become: true
  tags: loki

- name: copy config file
  template:
    src: loki.config.yml.j2
    dest: "{{ loki_config_dir }}/{{ loki_config_file }}"
    owner: "{{ loki_system_user }}"
    group: "{{ loki_system_group }}"
    mode: 0644
  notify: restart loki
  become: true
  tags: loki

- name: create systemd service unit
  template:
    src: loki.service.j2
    dest: /etc/systemd/system/loki.service
    owner: root
    group: root
    mode: 0644
  notify: restart loki
  become: true
  tags: loki

- name: enable capabilities to ports lower than port 1024
  capabilities:
    path: "{{ loki_binary_install_dir }}/loki"
    capability: CAP_NET_BIND_SERVICE+ep
    state: present
  when: loki_web_listen_port <= 1024
  tags: loki

- name: allow binding to port in selinux
  seport:
    ports: "{{ loki_web_listen_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_version.full is version_compare('2.4', '>=')
    - ansible_selinux.status == "enabled"
  become: true
  tags: loki

- name: check whether ufw status is active
  command: "ufw status"
  changed_when: False
  ignore_errors: True
  register: _ufw_status
  become: true
  when:
    - loki_allow_firewall
    - ansible_os_family == 'Debian'
  tags: loki

- name: check whether firewalld status is active
  command: "firewall-cmd --state"
  changed_when: False
  ignore_errors: True
  register: _firewalld_status
  become: true
  when: ansible_os_family == 'RedHat'
  tags: loki

- name: configure ufw
  community.general.ufw:
    rule: allow
    port: "{{ loki_web_listen_port }}"
    proto: tcp
    state: enabled
    comment: "Grafana Loki loki"
  changed_when: False
  ignore_errors: True
  notify: reload ufw
  become: true
  tags: loki
  when:
    - "'active' in _ufw_status.stdout"
    - ansible_os_family == 'Debian'
    - loki_allow_firewall

- name: configure firewalld
  firewalld:
    port: "{{ loki_web_listen_port }}/tcp"
    permanent: yes
    state: true
  changed_when: False
  ignore_errors: True
  when:
    - "'running' in _firewalld_status.stdout"
    - loki_allow_firewall
    - ansible_os_family == 'RedHat'
  notify: reload firewalld
  become: true
  tags: loki

- name: start and enable loki
  systemd:
    daemon_reload: true
    name: loki
    enabled: true
    state: started
  become: true
  tags: loki
